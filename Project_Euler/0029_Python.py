

# Project Euler: 29
"""
Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:

2^2=4,  2^3=8,    2^4=16,   2^5=32
3^2=9,  3^3=27,   3^4=81,   3^5=243
4^2=16, 4^3=64,   4^4=256,  4^5=1024
5^2=25, 5^3=125,  5^4=625,  5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?
"""

import time

def euler_29(n):
  
  number = 1
  cont = 1
  diag = 1

  while True:
    
    for i in range(1,5): # Voy sumando de a 4
      number = number + 2*cont
      diag = diag + number

    cont+=1

    if number >= n**2:
      break
    
  return diag

##############################################

if __name__ == "__main__":

  start=time.time()
  number = 1001 # 5x5

  a = euler_29(number)

  print("La suma de las diagonales es: {}".format(a))

  print("\nTiempo de operación:",time.time()-start,"seg.")
    
##############################################

"""
La suma de las diagonales es: 669171001

Tiempo de operación: 0.0014324188232421875 seg.
"""
